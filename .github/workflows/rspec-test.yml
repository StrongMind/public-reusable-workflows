name: "rspec test"

on:
  workflow_call:
    inputs:
      ruby-version:
        description: "Ruby version"
        required: false
        default: "3.2.6"
        type: string
      bundle-no-assets:
        description: "Bundle assets"
        required: false
        default: bundle exec rails db:prepare db:migrate assets:precompile
        type: string
      run-parallel:
        description: "Run parallel tests"
        required: false
        default: false
        type: boolean
      run-job-per-folder:
        description: "Run tests in separate jobs per folder"
        required: false
        default: false
        type: boolean

jobs:
  list-folders:
    name: List folders
    runs-on: ubuntu-latest-m
    if: ${{ inputs.run-job-per-folder == true }}
    outputs:
      matrix: ${{ steps.get-folders.outputs.matrix }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install Vips dependencies
        if: ${{ github.repository == 'StrongMind/central' && steps.spec-check.outputs.specs-found == 'true' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y libvips-dev

      - name: Distribute files under specs/models into four separate folders (models1, models2, models3, models4)
        run: |
          set -xeuo pipefail
          mkdir -p ./spec/models1 ./spec/models2 ./spec/models3 ./spec/models4
          files=($(ls ./spec/models))
          total_files=${#files[@]}
          quarter_size=$((total_files / 4))
          counter=0
          for file in "${files[@]}"; do
            if (( counter < quarter_size )); then
              mv "./spec/models/$file" ./spec/models1/
            elif (( counter < 2 * quarter_size )); then
              mv "./spec/models/$file" ./spec/models2/
            elif (( counter < 3 * quarter_size )); then
              mv "./spec/models/$file" ./spec/models3/
            else
              mv "./spec/models/$file" ./spec/models4/
            fi
            counter=$((counter + 1))
          done

      - name: List folders in spec folder
        id: get-folders
        run: |
          echo "::set-output name=matrix::$(find ./spec -maxdepth 1 -type d ! -path ./spec | jq -R -s -c 'split("\n")[:-1]')"

  run-tests-in-folder:
    name: Run tests in folder
    runs-on: ubuntu-latest-m
    needs: list-folders
    if: ${{ inputs.run-job-per-folder == true }}
    strategy:
      matrix:
        folder: ${{fromJson(needs.list-folders.outputs.matrix)}}
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: app
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install Vips dependencies
        if: ${{ github.repository == 'StrongMind/central' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y libvips-dev

      - name: Distribute files under specs/models into four separate folders (models1, models2, models3, models4)
        run: |
          set -xeuo pipefail
          mkdir -p ./spec/models1 ./spec/models2 ./spec/models3 ./spec/models4
          files=($(ls ./spec/models))
          total_files=${#files[@]}
          quarter_size=$((total_files / 4))
          counter=0
          for file in "${files[@]}"; do
            if (( counter < quarter_size )); then
              mv "./spec/models/$file" ./spec/models1/
            elif (( counter < 2 * quarter_size )); then
              mv "./spec/models/$file" ./spec/models2/
            elif (( counter < 3 * quarter_size )); then
              mv "./spec/models/$file" ./spec/models3/
            else
              mv "./spec/models/$file" ./spec/models4/
            fi
            counter=$((counter + 1))
          done

      - name: Check for specs
        id: spec-check
        run: |
          cd ${{ matrix.folder }}
          if find . -name '*_spec.rb' | grep -q .; then
            echo "specs-found=true" >> $GITHUB_OUTPUT;
          else
            echo "specs-found=false" >> $GITHUB_OUTPUT;
          fi

      - name: Set up Ruby
        if: ${{ steps.spec-check.outputs.specs-found == 'true' }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ inputs.ruby-version }}
          bundler-cache: 'true'
        env:
          BUNDLE_GEMS__CONTRIBSYS__COM: ${{ secrets.BUNDLE_GEMS__CONTRIBSYS__COM }}

      - name: Assets and DB setup
        if: ${{ steps.spec-check.outputs.specs-found == 'true' }}
        run: |
          bundle exec rails assets:precompile
          bundle exec rails parallel:create
          bundle exec rails parallel:migrate
        env:
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
          RAILS_ENV: test

      - name: Test
        if: ${{ steps.spec-check.outputs.specs-found == 'true' }}
        run: |
          FOLDER=${{ matrix.folder }}
          FOLDER=${FOLDER#./}
          RAILS_ENV=test bundle exec rails "parallel:spec[^$FOLDER]"
        env:
          RAILS_ENV: test

      - name: Download the parsing script
        if: ${{ steps.spec-check.outputs.specs-found == 'true' }}
        run: |
          wget 'https://raw.githubusercontent.com/StrongMind/public-reusable-workflows/main/scripts/parse_rspec_json_output.py'

      - name: Check for skipped tests
        if: ${{ steps.spec-check.outputs.specs-found == 'true' }}
        run: |
          if [ -f ${{ github.workspace }}/rspec_output.json ]; then
            python ${{ github.workspace }}/parse_rspec_json_output.py ${{ github.workspace }}/rspec_output.json
          fi

  run-tests:
    name: Run tests
    runs-on: ubuntu-latest-m
    if: ${{ inputs.run-job-per-folder == false }}
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: app
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      
      - name: Install Vips dependencies
        if: ${{ github.repository == 'StrongMind/central' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y libvips-dev
      
      - name: Start Postgres
        run: sudo systemctl start postgresql.service
      
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ inputs.ruby-version }}
          bundler-cache: 'true'
        env:
          BUNDLE_GEMS__CONTRIBSYS__COM: ${{ secrets.BUNDLE_GEMS__CONTRIBSYS__COM }}

      - run: |
          ${{ inputs.bundle-no-assets }}
        env:
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
          RAILS_ENV: test

      - name: Check for Secret availability
        id: secret-check
        # perform secret check & put boolean result as an output
        shell: bash
        run: |
          if [ "${{ secrets.CC_TEST_REPORTER_ID }}" != '' ]; then
            echo "available=true" >> $GITHUB_OUTPUT;
          else
            echo "available=false" >> $GITHUB_OUTPUT;
          fi
          
      - name: Test with Jest
        shell: bash
        run: |
          if test -f "jest.config.js"; then
              npm i
              npm run test
          fi


      - name: Test in parallel
        if: ${{ inputs.run-parallel == true }}
        run: |
          bundle exec rails parallel:create
          bundle exec rails parallel:migrate
          RAILS_ENV=test bundle exec rails parallel:spec

      - name: Test
        if: ${{ steps.secret-check.outputs.available != 'true' && inputs.run-parallel == false }}
        run: |
          RAILS_ENV=test bundle exec rspec --format documentation --format json --out ${{ github.workspace }}/rspec_output.json

      - name: Test & publish code coverage
        uses: paambaati/codeclimate-action@v5.0.0
        if: ${{ steps.secret-check.outputs.available == 'true' && inputs.run-parallel == false }}
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
        with:
          coverageCommand: 'bundle exec rspec --format documentation --format json --out ${{ github.workspace }}/rspec_output.json'
          coverageLocations: |
            ${{github.workspace}}/coverage/coverage.json:simplecov
          debug: true

      - name: Download the parsing script
        run: |
          wget 'https://raw.githubusercontent.com/StrongMind/public-reusable-workflows/main/scripts/parse_rspec_json_output.py'
  
      - name: Check for skipped tests
        run: |
          if [ -f ${{ github.workspace }}/rspec_output.json ]; then
            python ${{ github.workspace }}/parse_rspec_json_output.py ${{ github.workspace }}/rspec_output.json
          fi
