name: "rspec test"

on:
  workflow_call:
    inputs:
      ruby-version:
        description: "Ruby version"
        required: false
        default: "3.2.6"
        type: string
      bundle-no-assets:
        description: "Bundle assets"
        required: false
        default: bundle exec rails db:prepare db:migrate assets:precompile
        type: string
      run-parallel:
        description: "Run parallel tests"
        required: false
        default: false
        type: boolean
      run-job-per-folder:
        description: "Run tests in separate jobs per folder"
        required: false
        default: false
        type: boolean

jobs:
  list-folders:
    name: List folders
    runs-on: self-hosted
    if: ${{ inputs.run-job-per-folder == true }}
    outputs:
      matrix: ${{ steps.get-folders.outputs.matrix }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          clean: true

      - name: Distribute spec files into separate folders
        run: |
          set -xeuo pipefail
          
          # Function to distribute files from a source directory into four target directories
          distribute_files() {
            local dir_path=$1
            
            if [ ! -d "$dir_path" ]; then
              return
            fi
            
            # Create target directories
            mkdir -p "${dir_path}1" "${dir_path}2" "${dir_path}3" "${dir_path}4"
            
            # Get file list into an array using a more compatible approach
            all_files=$(find "$dir_path" -type f -name "*_spec.rb" | sort)
            total_files=$(echo "$all_files" | wc -l)
            
            if [ $total_files -eq 0 ]; then
              return
            fi
            
            quarter_size=$((total_files / 4))
            counter=0
            
            # Distribute files
            echo "$all_files" | while read -r file_path; do
              # Skip empty lines
              [ -z "$file_path" ] && continue
              
              # Extract just the filename
              filename=$(basename "$file_path")
              
              # Create parent directories if needed
              rel_path=${file_path#$dir_path/}
              dir_part=$(dirname "$rel_path")
              
              if [ "$dir_part" != "." ]; then
                if (( counter < quarter_size )); then
                  mkdir -p "${dir_path}1/$dir_part"
                  cp "$file_path" "${dir_path}1/$rel_path"
                elif (( counter < 2 * quarter_size )); then
                  mkdir -p "${dir_path}2/$dir_part"
                  cp "$file_path" "${dir_path}2/$rel_path"
                elif (( counter < 3 * quarter_size )); then
                  mkdir -p "${dir_path}3/$dir_part"
                  cp "$file_path" "${dir_path}3/$rel_path"
                else
                  mkdir -p "${dir_path}4/$dir_part"
                  cp "$file_path" "${dir_path}4/$rel_path"
                fi
              else
                if (( counter < quarter_size )); then
                  cp "$file_path" "${dir_path}1/$filename"
                elif (( counter < 2 * quarter_size )); then
                  cp "$file_path" "${dir_path}2/$filename"
                elif (( counter < 3 * quarter_size )); then
                  cp "$file_path" "${dir_path}3/$filename"
                else
                  cp "$file_path" "${dir_path}4/$filename"
                fi
              fi
              
              counter=$((counter + 1))
            done
            
            # Now remove the original spec files to avoid duplication
            find "$dir_path" -type f -name "*_spec.rb" -delete
          }
          
          # Distribute specs across folders
          distribute_files "./spec/models"
          distribute_files "./spec/requests"
          distribute_files "./spec/lib"

      - name: List folders in spec folder
        id: get-folders
        run: |
          echo "::set-output name=matrix::$(find ./spec -maxdepth 1 -type d ! -path ./spec | jq -R -s -c 'split("\n")[:-1]')"

  run-tests-in-folder:
    name: Run tests in folder
    runs-on: self-hosted
    needs: list-folders
    if: ${{ inputs.run-job-per-folder == true }}
    strategy:
      matrix:
        folder: ${{fromJson(needs.list-folders.outputs.matrix)}}
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: app
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          clean: true

      - name: Distribute spec files into separate folders
        run: |
          set -xeuo pipefail
          
          # Function to distribute files from a source directory into four target directories
          distribute_files() {
            local dir_path=$1
            
            if [ ! -d "$dir_path" ]; then
              return
            fi
            
            # Create target directories
            mkdir -p "${dir_path}1" "${dir_path}2" "${dir_path}3" "${dir_path}4"
            
            # Get file list into an array using a more compatible approach
            all_files=$(find "$dir_path" -type f -name "*_spec.rb" | sort)
            total_files=$(echo "$all_files" | wc -l)
            
            if [ $total_files -eq 0 ]; then
              return
            fi
            
            quarter_size=$((total_files / 4))
            counter=0
            
            # Distribute files
            echo "$all_files" | while read -r file_path; do
              # Skip empty lines
              [ -z "$file_path" ] && continue
              
              # Extract just the filename
              filename=$(basename "$file_path")
              
              # Create parent directories if needed
              rel_path=${file_path#$dir_path/}
              dir_part=$(dirname "$rel_path")
              
              if [ "$dir_part" != "." ]; then
                if (( counter < quarter_size )); then
                  mkdir -p "${dir_path}1/$dir_part"
                  cp "$file_path" "${dir_path}1/$rel_path"
                elif (( counter < 2 * quarter_size )); then
                  mkdir -p "${dir_path}2/$dir_part"
                  cp "$file_path" "${dir_path}2/$rel_path"
                elif (( counter < 3 * quarter_size )); then
                  mkdir -p "${dir_path}3/$dir_part"
                  cp "$file_path" "${dir_path}3/$rel_path"
                else
                  mkdir -p "${dir_path}4/$dir_part"
                  cp "$file_path" "${dir_path}4/$rel_path"
                fi
              else
                if (( counter < quarter_size )); then
                  cp "$file_path" "${dir_path}1/$filename"
                elif (( counter < 2 * quarter_size )); then
                  cp "$file_path" "${dir_path}2/$filename"
                elif (( counter < 3 * quarter_size )); then
                  cp "$file_path" "${dir_path}3/$filename"
                else
                  cp "$file_path" "${dir_path}4/$filename"
                fi
              fi
              
              counter=$((counter + 1))
            done
            
            # Now remove the original spec files to avoid duplication
            find "$dir_path" -type f -name "*_spec.rb" -delete
          }
          
          # Distribute specs across folders
          distribute_files "./spec/models"
          distribute_files "./spec/requests"
          distribute_files "./spec/lib"

      - name: Check for specs
        id: spec-check
        run: |
          cd ${{ matrix.folder }}
          if find . -name '*_spec.rb' | grep -q .; then
            echo "specs-found=true" >> $GITHUB_OUTPUT;
          else
            echo "specs-found=false" >> $GITHUB_OUTPUT;
          fi

      - name: Set up Ruby
        if: ${{ steps.spec-check.outputs.specs-found == 'true' }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ inputs.ruby-version }}
          bundler-cache: 'true'
        env:
          BUNDLE_GEMS__CONTRIBSYS__COM: ${{ secrets.BUNDLE_GEMS__CONTRIBSYS__COM }}

      - name: Assets and DB setup
        if: ${{ steps.spec-check.outputs.specs-found == 'true' }}
        run: |
          bundle exec rails assets:precompile
          bundle exec rails parallel:create
          bundle exec rails parallel:migrate
        env:
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
          RAILS_ENV: test

      - name: Test
        if: ${{ steps.spec-check.outputs.specs-found == 'true' }}
        run: |
          FOLDER=${{ matrix.folder }}
          FOLDER=${FOLDER#./}
          RAILS_ENV=test bundle exec rails "parallel:spec[^$FOLDER]"
        env:
          RAILS_ENV: test

  run-tests:
    name: Run tests
    runs-on: self-hosted
    if: ${{ inputs.run-job-per-folder == false }}
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: app
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          clean: true
      
      - name: Start Postgres
        run: sudo systemctl start postgresql.service
      
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ inputs.ruby-version }}
          bundler-cache: 'true'
        env:
          BUNDLE_GEMS__CONTRIBSYS__COM: ${{ secrets.BUNDLE_GEMS__CONTRIBSYS__COM }}

      - run: |
          ${{ inputs.bundle-no-assets }}
        env:
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
          RAILS_ENV: test
          
      - name: Test with Jest
        shell: bash
        run: |
          if test -f "jest.config.js"; then
              npm i
              npm run test
          fi

      - name: Test in parallel
        if: ${{ inputs.run-parallel == true }}
        run: |
          bundle exec rails parallel:create
          bundle exec rails parallel:migrate
          RAILS_ENV=test bundle exec rails parallel:spec

      - name: Test
        if: ${{ inputs.run-parallel == false }}
        run: |
          RAILS_ENV=test bundle exec rspec --format documentation --format json --out ${{ github.workspace }}/rspec_output.json
