FROM myoung34/github-runner:latest

# Switch to root to install Ruby
USER root

# Install dependencies for Ruby build and PostgreSQL
RUN apt-get update && apt-get install -y \
    build-essential \
    libssl-dev \
    libreadline-dev \
    zlib1g-dev \
    libyaml-dev \
    libffi-dev \
    libgdbm-dev \
    libncurses5-dev \
    libgdbm-compat-dev \
    libbz2-dev \
    libreadline6-dev \
    libyaml-dev \
    libsqlite3-dev \
    sqlite3 \
    libxml2-dev \
    libxslt1-dev \
    libcurl4-openssl-dev \
    software-properties-common \
    git \
    curl \
    wget \
    postgresql \
    postgresql-contrib \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Install rbenv and ruby-build
RUN git clone https://github.com/rbenv/rbenv.git /opt/rbenv \
    && git clone https://github.com/rbenv/ruby-build.git /opt/ruby-build \
    && ln -s /opt/ruby-build/bin/ruby-build /usr/local/bin/ruby-build

# Set up environment for rbenv
ENV RBENV_ROOT=/opt/rbenv
ENV PATH="$RBENV_ROOT/bin:$PATH"
ENV PATH="$RBENV_ROOT/shims:$PATH"

# Create the tool cache directory structure
RUN mkdir -p /opt/hostedtoolcache/Ruby/3.2.6/x64

# Install Ruby 3.2.6 for x64 (amd64) with memory-optimized build flags
RUN RUBY_CONFIGURE_OPTS="--disable-install-doc --disable-install-rdoc --disable-install-capi" \
    /opt/ruby-build/bin/ruby-build 3.2.6 /opt/hostedtoolcache/Ruby/3.2.6/x64

# Mark Ruby installation as complete
RUN touch /opt/hostedtoolcache/Ruby/3.2.6/x64.complete

# Set proper permissions for the runner user (but keep running as root)
RUN chown -R runner:runner /opt/hostedtoolcache

# Set up Ruby environment for the runner user
RUN echo 'export RBENV_ROOT=/opt/rbenv' >> /home/runner/.bashrc \
    && echo 'export PATH="$RBENV_ROOT/bin:$PATH"' >> /home/runner/.bashrc \
    && echo 'export PATH="$RBENV_ROOT/shims:$PATH"' >> /home/runner/.bashrc

# Verify Ruby installation
RUN /opt/hostedtoolcache/Ruby/3.2.6/x64/bin/ruby --version

# Configure PostgreSQL
# Set up postgres user and initialize the database
RUN mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql
RUN mkdir -p /var/lib/postgresql/data && chown -R postgres:postgres /var/lib/postgresql
RUN mkdir -p /var/log/postgresql && chown -R postgres:postgres /var/log/postgresql

# Initialize PostgreSQL database cluster as postgres user
RUN su - postgres -c "/usr/lib/postgresql/*/bin/initdb -D /var/lib/postgresql/data"

# Configure PostgreSQL to accept local connections
RUN echo "host all all 0.0.0.0/0 trust" >> /var/lib/postgresql/data/pg_hba.conf
RUN echo "listen_addresses='*'" >> /var/lib/postgresql/data/postgresql.conf

# Create a startup script that will start PostgreSQL in the background
RUN echo '#!/bin/bash\n\
if [ ! -f /var/run/postgresql/.started ]; then\n\
    su - postgres -c "/usr/lib/postgresql/*/bin/pg_ctl -D /var/lib/postgresql/data -l /var/log/postgresql/postgresql.log start"\n\
    sleep 2\n\
    su - postgres -c "psql -c \\"ALTER USER postgres WITH PASSWORD '\''postgres'\'';\\""\n\
    su - postgres -c "psql -c \\"CREATE DATABASE app;\\""\n\
    touch /var/run/postgresql/.started\n\
fi\n' > /usr/local/bin/start-postgres.sh && chmod +x /usr/local/bin/start-postgres.sh

# Set PostgreSQL environment variables for Rails
ENV PGHOST=localhost
ENV PGPORT=5432
ENV PGUSER=postgres
ENV PGPASSWORD=postgres
ENV POSTGRES_HOST=localhost
ENV POSTGRES_PORT=5432
ENV POSTGRES_USER=postgres
ENV POSTGRES_PASSWORD=postgres
ENV POSTGRES_DB=app

# Note: This Dockerfile is optimized for Fargate and does NOT mount /var/run/docker.sock
# For Docker-in-Docker support, use the EC2-backed ECS option with the original Dockerfile

